@page "/cashout"
@inject JsonFileService<DataStore> DataStoreService

<h3>Cash Out</h3>
<form @onsubmit="HandleCashOut">
    <label>Amount:</label>
    <input @bind="Amount" type="number" />
    <label>Note:</label>
    <input @bind="Note" />

    <!-- Tag selection dropdown -->
    <label>Tags:</label>
    <select @bind="SelectedTagId">
        <option value="">Select a tag</option>
        @foreach (var tag in Tags)
        {
            <option value="@tag.TagId">@tag.TagName</option>
        }
    </select>

    <button type="submit">Add</button>
</form>

<p style="color:red">@ErrorMessage</p>

@code {
    private decimal Amount;
    private string Note;
    private string ErrorMessage;
    private List<Transaction> transactions = new List<Transaction>();
    private List<Credit> credits = new List<Credit>();
    private List<Debit> debits = new List<Debit>();
    private List<Tag> Tags = new List<Tag>(); // Initialize Tags list
    private int? SelectedTagId; // Store the selected tag ID

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load data from the JSON file
            var dataStore = await DataStoreService.LoadDataAsync();
            if (dataStore == null)
            {
                ErrorMessage = "Failed to load data.";
                return;
            }

            transactions = dataStore.Transactions.ToList();
            credits = dataStore.credits.ToList();
            debits = dataStore.debits.ToList();
            Tags = dataStore.Tagss.ToList(); // Load tags
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading data: {ex.Message}";
        }
    }

    private async Task HandleCashOut()
    {
        try
        {
            if (Amount <= 0)
            {
                ErrorMessage = "Amount must be greater than zero.";
                return;
            }

            // Calculate available balance
            decimal? availableBalance = credits.Sum(c => c.CreditAmount) - transactions
                .Where(t => t.TransactionLabel == "Debit" || t.TransactionLabel == "Debt")
                .Sum(t => t.Amount);

            decimal availableBalanceValue = availableBalance.GetValueOrDefault();

            string tagName = string.Empty;

            // Retrieve the tag name based on the selected tag ID
            var selectedTag = Tags.FirstOrDefault(tag => tag.TagId == SelectedTagId);
            if (selectedTag != null)
            {
                tagName = selectedTag.TagName; // Get the tag name
            }

            if (availableBalanceValue >= Amount)
            {
                // Add normal debit transaction
                transactions.Add(new Transaction
                    {
                        TransactionId = transactions.Count + 1,
                        TransactionLabel = "Debit",
                        Amount = Amount,
                        TransactionOf = Note,
                        TagName = tagName, // Add the tag to the transaction
                        Date = DateTime.Now
                    });

                // Add corresponding debit entry
                debits.Add(new Debit
                    {
                        DebitId = debits.Count + 1,
                        DebitAmount = Amount,
                        DebitDescription = Note,
                        DebitDate = DateTime.Now,
                      
                    });
            }
            else
            {
                if (availableBalanceValue > 0)
                {
                    // Add debit transaction for available balance
                    transactions.Add(new Transaction
                        {
                            TransactionId = transactions.Count + 1,
                            TransactionLabel = "Debit",
                            Amount = availableBalanceValue,
                            TransactionOf = Note,
                            TagName = tagName, // Add the tag to the transaction
                            Date = DateTime.Now
                        });

                    // Add corresponding debit entry
                    debits.Add(new Debit
                        {
                            DebitId = debits.Count + 1,
                            DebitAmount = availableBalanceValue,
                            DebitDescription = Note,
                            DebitDate = DateTime.Now,
                            
                        });
                }

                // Handle the remaining debt if available balance is insufficient
                var remainingDebt = Amount - availableBalanceValue;

                transactions.Add(new Transaction
                    {
                        TransactionId = transactions.Count + 1,
                        TransactionLabel = "Debt",
                        Amount = remainingDebt,
                        TransactionOf = "Insufficient Balance",
                        TagName = tagName, // Add the tag to the debt
                        Date = DateTime.Now,
                        IsDebtCleared = false
                    });
            }

            // Save updated data
            var updatedDataStore = new DataStore
                {
                    Transactions = transactions,
                    credits = credits,
                    debits = debits, // Save updated debits
                    Tagss = Tags // Save the tags as well
                };
            await DataStoreService.SaveDataAsync(updatedDataStore);

            // Reset fields after submission
            Amount = 0;
            Note = string.Empty;
            SelectedTagId = null;
            ErrorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred while processing the cash-out: {ex.Message}";
        }
    }
}
